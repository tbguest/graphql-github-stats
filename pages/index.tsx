import { gql } from "@apollo/client";
import classNames from "classnames";
import type { NextPage } from "next";
import Head from "next/head";
import { useState } from "react";
import { AiFillStar } from "react-icons/ai";
import { BiGitPullRequest } from "react-icons/bi";
import { VscIssues, VscRepoForked } from "react-icons/vsc";
import { getApolloClient } from "../apollo-client";
import { BarPlot } from "../components/BarPlot";
import { CardLink } from "../components/CardLink";
import { Repo } from "../models";
import styles from "../styles/Home.module.css";

const repositories = [
  { owner: "ethereum", repo: "go-ethereum" },
  { owner: "paritytech", repo: "polkadot" },
  { owner: "ava-labs", repo: "avalanchego" },
  { owner: "cosmos", repo: "ibc-go" },
  { owner: "solana-labs", repo: "solana" },
];

const Home: NextPage = ({ repo }: Repo) => {
  const openList = repositories.map(() => false);
  const [open, setOpen] = useState(openList);

  // toggle the plot state boolean by index
  const handlePlotClick = (i: number) => {
    const list = [...open];
    list[i] = !list[i];
    setOpen(list);
  };

  const repoCards = Object.keys(repo).map((key: string, index) => {
    return (
      <div
        className={classNames(styles.repocard, {
          [styles.repocard_clicked]: open[index],
        })}
        key={key}
      >
        <CardLink onClick={() => handlePlotClick(index)}>
          <h2>{repo[key].nameWithOwner}</h2>
          <h3>{repo[key].description}</h3>
          <div className={styles.content}>
            <div className={styles.list}>
              <p>
                <AiFillStar /> stars:{" "}
                <strong>{repo[key].stargazerCount}</strong>
              </p>
              <p>
                <VscIssues /> issues (open):{" "}
                <strong>{repo[key].openIssues.totalCount}</strong>
              </p>
              <p>
                <VscRepoForked /> forks: <strong>{repo[key].forkCount}</strong>
              </p>
              <p>
                <BiGitPullRequest /> pull requests (open):{" "}
                <strong>{repo[key].pullRequests.totalCount}</strong>
              </p>
            </div>
            <span className={styles.prompt}>show commits</span>
            <div
              className={classNames(styles.plot, {
                [styles.plot_open]: open[index],
              })}
            >
              <div className={styles.chart}>
                {open[index] && <BarPlot name={repo[key].nameWithOwner} />}
              </div>
            </div>
          </div>
        </CardLink>
      </div>
    );
  });

  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles.main}>
        <>
          <h1>GitHub projects by development effort</h1>
          <p>
            Disclaimer: The merit of a project cannot be judged solely on the
            metrics shown here. Use your judgement.
          </p>
          <div className={styles.grid}>{repoCards}</div>
        </>
      </main>
    </div>
  );
};

export default Home;

export async function getServerSideProps() {
  const client = getApolloClient();

  const { data } = await client.query<Repo>({
    query: gql`
      fragment repoProperties on Repository {
        id
        description
        forkCount
        name
        nameWithOwner
        stargazerCount
        issues {
          totalCount
        }
        mentionableUsers {
          totalCount
        }
        assignableUsers {
          totalCount
        }
        openIssues: issues(states: OPEN) {
          totalCount
        }
        pullRequests(states: OPEN) {
          totalCount
        }
        object(expression: "master") {
          ... on Commit {
            id
            history {
              totalCount
            }
          }
        }
      }
      
      {
        ${repositories
          .map(
            ({ owner, repo }, index) => `repo${
              index + 1
            }: repository(owner: "${owner}", name: "${repo}") {
          ...repoProperties
        }`
          )
          .join("\n")}
      }`,
  });

  const repo = data;

  return {
    props: {
      repo,
    },
  };
}
