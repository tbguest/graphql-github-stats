import { gql } from "@apollo/client";
import type { NextPage } from "next";
import Head from "next/head";
import { useState } from "react";
import { getApolloClient } from "../apollo-client";
import { CardGrid } from "../components/CardGrid";
import { Repo } from "../models";
import styles from "../styles/Home.module.css";
import { AddRepoForm } from "../components/AddRepoForm";

const repositories = [
  { owner: "ethereum", repo: "go-ethereum" },
  { owner: "paritytech", repo: "polkadot" },
  { owner: "ava-labs", repo: "avalanchego" },
  { owner: "cosmos", repo: "ibc-go" },
  { owner: "solana-labs", repo: "solana" },
];

const Home: NextPage = ({ repo }: Repo) => {
  // const [repoList, setRepoList] = useState(repositories);

  const openList = repoList?.map(() => false);
  const [open, setOpen] = useState(openList);

  // toggle the plot state boolean by index
  const handlePlotClick = (i: number) => {
    const list = [...open];
    list[i] = !list[i];
    setOpen(list);
  };

  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles.main}>
        <>
          <h1>GitHub projects by development effort</h1>
          <p>
            Disclaimer: The merit of a project cannot be judged solely on the
            metrics shown here. Use your judgement.
          </p>
          <AddRepoForm repositories={repositories} />
          <CardGrid repo={repo} open={open} onClick={handlePlotClick} />
        </>
      </main>
    </div>
  );
};

export default Home;

export async function getServerSideProps() {
  const client = getApolloClient();

  const { data } = await client.query<Repo>({
    query: gql`
      fragment repoProperties on Repository {
        id
        description
        forkCount
        name
        nameWithOwner
        stargazerCount
        issues {
          totalCount
        }
        mentionableUsers {
          totalCount
        }
        assignableUsers {
          totalCount
        }
        openIssues: issues(states: OPEN) {
          totalCount
        }
        pullRequests(states: OPEN) {
          totalCount
        }
        object(expression: "master") {
          ... on Commit {
            id
            history {
              totalCount
            }
          }
        }
      }
      
      {
        ${repositories
          .map(
            ({ owner, repo }, index) => `repo${
              index + 1
            }: repository(owner: "${owner}", name: "${repo}") {
          ...repoProperties
        }`
          )
          .join("\n")}
      }`,
  });

  const repo = data;

  return {
    props: {
      repo,
    },
  };
}
