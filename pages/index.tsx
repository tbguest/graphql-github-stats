import {
  ApolloClient,
  createHttpLink,
  gql,
  InMemoryCache,
} from "@apollo/client";
import { setContext } from "@apollo/client/link/context";
import type { NextPage } from "next";
import Head from "next/head";
import styles from "../styles/Home.module.css";

const Home: NextPage = ({ repo }) => {
  console.log(repo);

  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <div>
          <p>Repo: {repo.nameWithOwner}</p>
          <p>Description: {repo.description}</p>
          <p>Stars: {repo.stargazerCount}</p>
          <p>Forks: {repo.forkCount}</p>
        </div>
      </main>
    </div>
  );
};

export default Home;

export async function getServerSideProps() {
  const httpLink = createHttpLink({
    uri: "https://api.github.com/graphql",
  });

  const authLink = setContext((_, { headers }) => {
    return {
      headers: {
        ...headers,
        authorization: `Bearer ${process.env.GITHUB_ACCESS_TOKEN}`,
      },
    };
  });

  const client = new ApolloClient({
    link: authLink.concat(httpLink),
    cache: new InMemoryCache(),
  });

  const { data } = await client.query({
    query: gql`
      {
        organization(login: "ethereum") {
          id
          name
          repository(name: "go-ethereum") {
            id
            description
            forkCount
            name
            nameWithOwner
            stargazerCount
          }
        }
      }
    `,
  });

  // console.log(data);

  // const organization = { data };
  const repo = data.organization.repository;

  return {
    props: {
      repo,
    },
  };
}
